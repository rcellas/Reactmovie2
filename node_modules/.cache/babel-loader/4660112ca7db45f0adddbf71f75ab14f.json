{"ast":null,"code":"import _classCallCheck from \"/home/rocio/Documentos/Reactmovie2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/rocio/Documentos/Reactmovie2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/rocio/Documentos/Reactmovie2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/rocio/Documentos/Reactmovie2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/rocio/Documentos/Reactmovie2/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/rocio/Documentos/Reactmovie2/src/components/Movie/Movie.js\";\nimport React, { Component } from 'react';\nimport { API_URL, API_KEY } from '../../config';\nimport Navigation from '../elements/Navigation/Navigation';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid';\nimport Actor from '../elements/Actor/Actor';\nimport Spinner from '../elements/Spinner/Spinner';\nimport './Movie.css';\n\nvar Movie =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Movie, _Component);\n\n  function Movie() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Movie);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Movie)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      movies: null,\n      actors: null,\n      directors: [],\n      loading: false // Este método solo se ejecuta justo después de que el componente haya sido montado en el DOM. perfecto para integrar otras librerias.\n\n    };\n\n    _this.fetchItems = function (endpoint) {\n      fetch(endpoint).then(function (result) {\n        return result.json();\n      }).then(function (result) {\n        console.log(result); //si no encuentra la peli\n\n        if (result.status_code) {\n          _this.setState({\n            loading: false\n          });\n        } else {\n          //pero si me encuentra la pelicula, que me muestre la información.\n          _this.setState({\n            movie: result\n          }, function () {\n            //...then fetch actors in the setState callback function\n            var endpoint = \"\".concat(API_URL, \"movie/\").concat(_this.props.match.params.movieId, \"/credits?api_key=\").concat(API_KEY);\n            fetch(endpoint).then(function (result) {\n              return result.json();\n            }).then(function (result) {\n              var directors = result.crew.filter(function (member) {\n                return member.job === \"Director\";\n              });\n\n              _this.setState({\n                actors: result.cast,\n                directors: directors,\n                loading: false\n              }, function () {\n                localStorage.setItem(\"\".concat(_this.props.match.params.movieId), JSON.stringin);\n              });\n            });\n          });\n        }\n      }).catch(function (error) {\n        return console.error('Error:', error);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Movie, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        loading: true\n      }); //primer fetch de las pelis\n\n      var endpoint = \"\".concat(API_URL, \"movie/\").concat(this.props.match.params.movieId, \"?api_key=\").concat(API_KEY, \"&language=en-US\");\n      this.fetchItems(endpoint);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"rmdb-movie\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, this.state.movie ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(Navigation, {\n        movie: this.props.location.movieName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(MovieInfo, {\n        movie: this.state.movie,\n        directors: this.state.directors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(MovieInfoBar, {\n        time: this - this.state.runtime,\n        budget: this.state.movie.budget,\n        revenue: this.state.movie.revenue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      })) : null, this.state.actors ? React.createElement(\"div\", {\n        className: \"rmdb-movie-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(FourColGrid, {\n        header: 'Actors',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, this.state.actors.map(function (element, i) {\n        return React.createElement(Actor, {\n          key: i,\n          actor: element,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        });\n      }))) : null, !this.state.actors && !this.state.loading ? React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"No Movie Found!\") : null, this.state.loading ? React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }) : null, \"}\");\n    }\n  }]);\n\n  return Movie;\n}(Component);\n\nexport default Movie;","map":{"version":3,"sources":["/home/rocio/Documentos/Reactmovie2/src/components/Movie/Movie.js"],"names":["React","Component","API_URL","API_KEY","Navigation","MovieInfo","MovieInfoBar","FourColGrid","Actor","Spinner","Movie","state","movies","actors","directors","loading","fetchItems","endpoint","fetch","then","result","json","console","log","status_code","setState","movie","props","match","params","movieId","crew","filter","member","job","cast","localStorage","setItem","JSON","stringin","catch","error","location","movieName","runtime","budget","revenue","map","element","i"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {API_URL,API_KEY} from '../../config';\nimport Navigation from '../elements/Navigation/Navigation';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid';\nimport Actor from '../elements/Actor/Actor';\nimport Spinner from '../elements/Spinner/Spinner';\nimport './Movie.css';\n\n\nclass Movie extends Component{\n    state={\n        movies:null,\n        actors:null,\n        directors:[],\n        loading:false\n    }\n\n    // Este método solo se ejecuta justo después de que el componente haya sido montado en el DOM. perfecto para integrar otras librerias.\n    componentDidMount(){\n        this.setState({loading:true})\n        //primer fetch de las pelis\n        const endpoint =`${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`;\n        this.fetchItems(endpoint);\n    }\n\n    fetchItems=(endpoint)=>{\n        fetch(endpoint)\n        .then(result =>result.json())\n        .then(result=>{\n            console.log(result)\n            //si no encuentra la peli\n            if (result.status_code){\n                this.setState({loading:false});\n            }else{\n                //pero si me encuentra la pelicula, que me muestre la información.\n                this.setState({movie: result},()=>{\n                    //...then fetch actors in the setState callback function\n                    const endpoint =`${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`\n                    fetch(endpoint)\n                    .then(result =>result.json())\n                    .then(result=>{\n                        const directors=result.crew.filter((member)=>member.job===\"Director\");\n\n                        this.setState({\n                            actors:result.cast,\n                            directors,\n                            loading:false\n                        },()=>{\n                            localStorage.setItem(`${this.props.match.params.movieId}`,JSON.stringin)\n                        })\n                    })\n                })\n            }\n        })\n        .catch(error=>console.error('Error:',error))\n    }\n    render(){\n        return(\n            <div className=\"rmdb-movie\">\n                {this.state.movie ?\n                    <div>\n                        <Navigation movie={this.props.location.movieName}/>\n                        <MovieInfo movie={this.state.movie} directors={this.state.directors}/>\n                        <MovieInfoBar time={this-this.state.runtime} budget={this.state.movie.budget} revenue={this.state.movie.revenue}/>\n                    </div> \n                    : null}\n                {this.state.actors ? \n                    <div className=\"rmdb-movie-grid\">\n                        <FourColGrid header={'Actors'}>\n                        {this.state.actors.map((element,i)=>{\n                            return <Actor key={i} actor={element}/>\n                        })}\n                        </FourColGrid>\n                    </div>\n                    :null}\n                    {!this.state.actors && !this.state.loading ? <h1>No Movie Found!</h1>:null}\n                    {this.state.loading ? <Spinner/>:null}\n                    \n                    }\n            </div>\n        )\n    }\n}\n\nexport default Movie;"]},"metadata":{},"sourceType":"module"}